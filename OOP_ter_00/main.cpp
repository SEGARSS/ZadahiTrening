#include <iostream>
#include <vector>
#include <string>

/*
В данном примере, мы объявили вектор. 
И в вектор, мы помещаем 100000000 единиц.
С помощью функции print_vector - мы выводим их в консоль.
Если не выводить в консоль вектор, а только просто использовать его назначание, то в данном примере
он уже занимает 500м оперативной памяти.
А приме его выводе на экран с помощью метода 
print_vector - ОЧЕНЬ много ещё в плюс идёт оперативной памяти. (что очень не хорошо).
Поэтому, что с экономить ресурсы(память) мы в методе print_vector передаём данные по ссылке(&),
и благодаря этому, наш вектор как занимал 500м в памяти, так и будет занимать столько,
не смотря на то что мы его выводим в консоль (на экран), (распечатываем по другому).
*/

template <typename T>
/*
<typename T>, нуже для того, чтобы мы могли использовать вектор не только (int) но и к примеру string.
Еслиб мы не написалибы template <typename T>, то в методе print_vector пришлось бы писать вот так -
void print_vector(const std::vector<int>& v) вместо - void print_vector(const std::vector<T>& v)
где разница в записи лишь vector<int> - vector<T>.
И если бы мы в main объявили бы вектор  std::vector<string> s;
то без записи template <typename T> - пришлось бы объявлять метод - 
void print_vector(const std::vector<string>& v) - хотя он уже есть(только с int), чтобы вывести содержимое на экран.
template <typename T> помогает с экономить код и ресурсы.
<typename T> - тоесть мы сделали так, что можем рабоать со многими векторами в методе print_vector.
*/
//------------------------------------------------------------------------------------------------
void print_vector(const std::vector<T>& v)
{
    for (int i = 0; i < v.size(); ++i) 
    {
        std::cout << v[i] << " ";
    }
    std::cout << std::endl;
}
//------------------------------------------------------------------------------------------------
int main()
{
    std::vector<int> v;

    //char - 1 байт
    //int - 4 байта

    for (int i = 0; i < 100000000; ++i)
    {
        v.push_back(1);
    }
    std::cout << v.size() << std::endl;

    print_vector(v);

    std::vector<std::string> vs;
    print_vector(vs);


    std::cout << v.size() << std::endl;

    return 0;
}
//------------------------------------------------------------------------------------------------