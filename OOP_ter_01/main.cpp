#include <iostream>
#include <vector>
#include <string>

//sf::Vector2f p1;
//sf::Vector2f p2;
//sf::Vector2f p3 = p1 + p2;

//----------------------------------------------------------------------------------
template <typename T>
void print_vector(const std::vector<T>& v)
{
    for (int i = 0; i < v.size(); ++i) 
    {
        std::cout << v[i] << " ";
    }
    std::cout << std::endl;
}
//----------------------------------------------------------------------------------

//Перегрузка оператора.
//----------------------------------------------------------------------------------
struct Point
{
    int x = 0;
    int y = 0;

    /*
    this - итак делается по умолчанию. Если мы его уберём к примеру туту - this->x,
    то у нас и так будет рабоать, просто this явно указывает на данные.
    this - лучше использовать редко и в крайних необходимостях.
    */
    void print()
    {
        std::cout << this->x << " " << this->y << std::endl;
        std::cout << x << " " << y << std::endl;
    }

    /*
    Прописываем 'const' - так как передлаём данные по ссылке (&).
    Это страховка, чтоб мы не подпортили и не изменили данные.
    */
    Point operator+ (const Point& p)//Оператор слоржения
    {
        Point tmp;
        tmp.x = x + p.x;
        tmp.y = y + p.y;
        return tmp;
    }
    Point operator- (const Point& p)//Оператор вычетания
    {
        Point tmp;
        tmp.x = x - p.x;
        tmp.y = y - p.y;
        return tmp;
    }
};
//----------------------------------------------------------------------------------
std::ostream& operator<< (std::ostream& os, const Point& p) //Оператор вывода данных на экран
{
    os << "(x=" << p.x << ", y=" << p.y << ")";
    return os;
}
//----------------------------------------------------------------------------------
int main()
{
    /*
    В данном примере, мы делаем перегрузку оператора -operator.
    Благодаря перегрузке оператора, мы можем данными проводить разного рода задачи,
    включая и вывод на экран.
    Если мы не объявили бы operator << , мы не смоглибы с помощью метода print_vector
    вывести данные на экран.
    А также, мы можем кординаты которые мы объявили, складывать, вычетать, благодаря операторам перегрузки.
    */

    Point a{ 1, 1 };

    Point b{ 2, 2 };

    //Point c{ a.x + b.x, a.y + b.y };

    Point c = a + b;

    std::vector<Point> vp;
    vp.push_back(a);
    vp.push_back(b);
    vp.push_back(c);


    print_vector(vp);


    return 0;
}
//----------------------------------------------------------------------------------
/*
& - применяем если нет временного объяекта (временной переменной). 
Как в примере - 
Point operator- (const Point& p)//Оператор вычетания
{
    Point tmp;
    tmp.x = x - p.x;
    tmp.y = y - p.y;
    return tmp;
}
Где временная переменная это - tmp.
*/